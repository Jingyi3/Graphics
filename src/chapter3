第三章 二维图源的填充
  确定哪些像素位于填充图元的内部
  确定什么颜色填充


扫描转换矩形
扫描转换多边形
  逐点判断法
  扫描线判断法
  边缘填充算法
扫描转换扇形
区域填充（种子填充）
  递归填充算法
  扫描线算法
以图像填充区域
字符的表示与输出

1. 矩形--单独处理，why？
    比一般多边形可以简化计算
    应用多，如窗口系统
        1）二重循环 填充一个个在区域内的点
        2）一重循环控制y在区域内 循环体里drawLine

2. 共享边界：左闭右开，下闭上开

3. 扫描转换多边形
多边形的表示方法：顶点表示--占内存少，不利于着色；点阵表示--利于着色
  逐点判断法
    逐点判断法的关键在于点在多边形内外的判断
        射线法
            从待判断的点v发出射线，求交点个数k，k的奇偶性决定了多边形的内在关系
            会造成误判--射线经过顶点；强制不发生这种情况--射线通过中点
        累计角度法
            从v点向多边形P顶点发出射线形成角度θ
            θ之和 = 0--外； = +-2π --内
        编码法
            是累计角度法的离散方法
    优点：程序简答
    缺点：速度慢，效率低
    原因：没有利用相邻像素之间的连贯性

  扫描线判断法
    目标：利用相邻像素之间的连贯性，提高算法效率
    目标对象：非自交多边形（边于边之间除了顶点之外没有其他交点）
    基本原理：一条扫描线与多边形的边有偶数个交点
    步骤：（利用DDA算法）
        1）求交点
        2）排序：把所有交点按照x值递增的顺序排序
        3）配对
        4）填色
    活性边表（AEL）
    边的分类表（ET）

  边缘填充算法
    求余运算
    由来：光栅图形中，如果某区域已填上颜色值M，当做欧数次秋雨运算--颜色不变；
    奇数次求余运算--颜色值编程M相反的颜色，利用此规则--边缘填充算法
    求余运算：可以利用异或显示模式实现
    算法基本思想：对于每条扫描线和每条多边形边的交点，将该扫描线上交点的右方所有像素取余数
    优点：算法简单
    缺点：对于复杂的图形，每一个像素被访问多次，输入输出量比扫描算法打得多，造成速度比较慢
    适合用于具有缓存的图形系统，处理后，按照扫描线顺序读出缓存内容，送入显示设备。

4. 扫描转换扇形
    原理：同扫描转换多边形（圆弧和扫描线交点可求）
    问题：如何确定扫描线与直线段和圆弧的相交顺序
    方法：分类16种情况
        当p1落在其他象限的时候：先将扇形顺时针转π/2扫描完成之后再逆时针转回来
        扫描转换扇形的其他方法：
        先求出扇形充分逼近的多边形，然后扫描转化多边形的算法对其填充

5. 区域填充（种子填充）
   将指定的颜色从种子点扩展到整个区域的过程
   区域填充算法要求区域是联通的
   4连通
   8连通--photoshop
        4连通可以看做是8连通的区域，但是作为4连通的时候边界只要8连通就可以；
        当8连通区域的时候，边界必须是4连通的（（？？说啥呢

   递归填充算法
    算法简单
    效率不高，进出栈费时费内存

   扫描线算法
    适用于4连通区域
    减少递归
    基本过程：当给定种子点(x,y)时，首先填充种子店所在扫描线上的位于给定区域的一个区段，
    然后确定与这一区段相通的上下两条扫描线上位于给定区域内的区段，并以此保存下来，反复。

6. 以图像填充区域
   1）均匀着色方式
   2）位图不透明方式
   3）位图透明方式
   4）像素图填充方式
   挂你建：建立区域与图像间的对应关系

7. 字符的表示与输出
   点阵字符：每个字符有一个位图表示
   矢量字符：记录字符的笔画信息 goooooooooooooood
