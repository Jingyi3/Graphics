第四章 二维图形的剪裁

直线段剪裁
  直接求交算法
  ！！Cohen-Sutherland算法
  ！Ncholl-Lee-Nicholl算法
  ！！中点算法

多边形剪裁
  ！！Sutherland_Hodgman算法
  ！Weiler-Atherton算法

字符剪裁

1. 直线段剪裁
   判断图形元素是否偶在剪裁窗口之内，并找出其位于内部的部分
   待剪裁线段和窗口的关系：
    线段完全可见
    显然不可见
    非显然不可见，需要进一步求交来确定线段是否有可见部分

   【！！Cohen-Sutherland算法】
   1）判断线段两个端点是否都落在窗口内，如果是--【完全可见】；否则2）
   2）判断线段是否是【显然不可见】，如果是，剪裁结束；否则3）
   3）求线段与窗口延长线的交点，这个交点将线段分成两段
      其中一段显然不可见--丢弃；剩余一段重新从1）判断
   特点：队显然不可见的线段快速判断-----完全可见和显然不可见
   编码方法：由窗口所在直线分为9个区域每个区域一个编码
   1001|1000|1010
   --------------
   0001|0000|0010
   --------------
   0101|0100|0110
   端点编码：定义为它所在区域的编码
    完全可见--两个端点编码是否都是0000
    显然不可见--两个端点编码逻辑与&&非0，eg(0001,1001)显然不可见
    剩下的线段--需要求交；顺序左上右下
   适合：大窗口场合（大多数对象都在窗口内）
        特别小窗口
   最坏情况，线段求交四次

   【中点分割算法】！！背吧
   算法主要：加法和除2运算，所以特别适合硬件实现。
   首先对线段端点进行编码，前两种情况相同，第三种情况用中点分割
   1）计算P0P1的中点Pm
   2）计算P0和Pm的区位码的位与，结果==0，说明最近可见点在P0Pm上，
      取P0Pm代替P0P1；否则取PmP1
   3）如果PmP1的长度小于给定容差-->4）否则-->1）
   4）结果输出：Pm就是P0的最近可见点

    【！Ncholl-Lee-Nicholl算法】
    消除C-S中多次求交的情况
    对2D平面的更细的划分
    效率较高--但是近适合二维矩形窗口


2. 多边形剪裁

【  ！！Sutherland_Hodgman算法】--逐边裁剪算法
流水线操作：左上右下
多边形的各边的两个端点SP与裁剪线的位置关系只有四种
   右边是内侧空间
1）仅输出p
|
| sp
|
2）输出0个顶点
  |
sp|
  |
3）输出交点I
     |
箭头 p|s
     |
4）输出交点I和终点
    |
   s|p箭头
    |
剪裁结果：顶点集有两部分构成：内侧的元顶点和交点--顺序连接
剪裁算法采用流水线方式--适合硬件实现
可以推广到任意凸多边形裁剪窗口
凹多边形可能会有多余的线--可以分成两个or多个凸多边形分别处理


【  ！Weiler-Atherton算法】
剪裁窗口非矩形
主多边形--被剪裁多边形【A】
剪裁多边形--剪裁窗口【B】
A和B把二维平面分成四个部分

...//

3. 字符剪裁
    基于字符串
    点阵字符：点剪裁
    矢量字符：线剪裁